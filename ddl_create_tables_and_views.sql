-- CREATE THE MLS FAQ SCHEMA
-- FIRST CREATING THE TABLES

-- CATEGORIES - REFERENCED BY QUESTION_ANSWER_MASTER(CATEGORY)
CREATE TABLE CATEGORIES 
( 
  category varchar(100) NOT NULL, 
  PRIMARY KEY (category)  
);

-- MASTER TABLE - REFERENCED BY WORD_LIST(DOC_ID)
CREATE TABLE QUESTION_ANSWER_MASTER ( 
  DOC_ID varchar(64) NOT NULL DEFAULT '',   
  QUESTION_TEXT varchar(2000) NOT NULL,  
  ANSWER_TEXT varchar(3000) NOT NULL, 
  CATEGORY varchar(50) NOT NULL,   
  PRIMARY KEY (DOC_ID),   
  KEY CATEGORY (CATEGORY), 
  CONSTRAINT FOREIGN KEY (CATEGORY) REFERENCES CATEGORIES (category)   
);

-- STORES STEMMED AND CONFLATED TERMS
CREATE TABLE WORD_LIST
( 
  DOC_ID varchar(64) NOT NULL DEFAULT '', 
  QUERY_TERM varchar(50) NOT NULL,  
  TERM_FREQUENCY int(11) NOT NULL,  
  PRIMARY KEY (DOC_ID, QUERY_TERM),   
  CONSTRAINT FOREIGN KEY (DOC_ID) REFERENCES QUESTION_ANSWER_MASTER (DOC_ID)  
);

-- STORES THE USER'S QUERY - MODIFIED IN QUERY_WL_VIEW
CREATE TABLE QUERY_WL (  
  query_term varchar(50) NOT NULL  
);

-- CREATE UDF TO CALCULATE IDF FOR GIVEN TERM (in_term) - USED IN WORD_LIST_CALC_VIEW
delimiter //
CREATE FUNCTION CALC_IDF(in_term VARCHAR(50)) RETURNS float
BEGIN
DECLARE docCount INT;
DECLARE relDocCount INT;
DECLARE retVal FLOAT;
SET docCount = -- total number of documents
(
    SELECT COUNT(DISTINCT DOC_ID) FROM FAQ415.WORD_LIST
);
SET relDocCount = -- number of relevant documents
(
    SELECT COUNT(*) FROM FAQ415.WORD_LIST WHERE QUERY_TERM = in_term
);
CASE relDocCount
	WHEN null THEN SET retVal = 0;
	WHEN 0 THEN SET retVal = 0;
	ELSE SET retVal = LOG(docCount / relDocCount);
END CASE;
RETURN retVal;
END//
delimiter ;

-- WORD_LIST_CALC VIEW
CREATE VIEW WORD_LIST_CALC AS
(
SELECT DOC_ID, QUERY_TERM, TERM_FREQUENCY, CALC_IDF(QUERY_TERM)
FROM WORD_LIST
);
 
-- GROUP BY is used so only distinct QUERY_TERMs are returned to simply calculations
CREATE OR REPLACE VIEW TERM_CALC_VIEW AS
(
SELECT distinct query_term, max(IDF) as IDF
FROM WORD_LIST_CALC
GROUP BY QUERY_TERM
);

-- CALCULATES TF_IDF FOR QUERY TERMS
CREATE OR REPLACE VIEW QUERY_WL_VIEW AS
(
SELECT DISTINCT WL.query_term, (COUNT(*) * DL.IDF) TF_IDF
FROM QUERY_WL WL
LEFT JOIN TERM_CALC_VIEW DL
ON WL.query_term = DL.query_term
     GROUP BY WL.QUERY_TERM
);

-- CALCULATE THE TOP (DIVIDEND) COSINE (group by DOC_ID)
CREATE OR REPLACE VIEW QUERY_DOC_CALC AS
(
SELECT
DISTINCT a.DOC_ID,
SUM(a.TERM_FREQUENCY * a.IDF * b.TF_IDF) TOP_COSINE
FROM WORD_LIST_CALC a,
QUERY_WL_VIEW b
WHERE a.query_term = b.query_term
GROUP by a.DOC_ID
ORDER BY 2
);

-- GET QUERY'S SIDE OF DIVIDEND; constant for all DOC_IDs
CREATE OR REPLACE VIEW GET_QUERY_BOTTOM AS
(
     SELECT SQRT(SUM(POWER(a.TF_IDF, 2))) br
     FROM QUERY_WL_VIEW a
);
 
-- Docâ€™s divisor value, different for each DOC_ID
CREATE OR REPLACE VIEW GET_DOC_BOTTOM AS
(
SELECT
DISTINCT DOC_ID,
SQRT(SUM(POWER(TERM_FREQUENCY * IDF, 2))) dr
FROM WORD_LIST_CALC wc
WHERE wc.QUERY_TERM IN
(SELECT QUERY_TERM FROM QUERY_WL)
GROUP BY DOC_ID
);
 
-- Ordered output occurs here (most-to-least relevant), by joining 3 previous views
CREATE OR REPLACE VIEW GET_COSINE AS
(
SELECT a.DOC_ID, (a.TOP_COSINE / (b.dr * c.br)) COSINE
FROM QUERY_DOC_CALC a,
GET_DOC_BOTTOM b,
GET_QUERY_BOTTOM c
WHERE a.DOC_ID = b.DOC_ID
ORDER BY COSINE DESC
);